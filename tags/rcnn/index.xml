<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RCNN on Guangzong Blog</title>
    <link>https://zongpitt.com/tags/rcnn/</link>
    <description>Recent content in RCNN on Guangzong Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Apr 2021 19:21:00 -0500</lastBuildDate><atom:link href="https://zongpitt.com/tags/rcnn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Faster R-CNN paper notes</title>
      <link>https://zongpitt.com/posts/2021-02-28-faster-rcnn/</link>
      <pubDate>Mon, 26 Apr 2021 19:21:00 -0500</pubDate>
      
      <guid>https://zongpitt.com/posts/2021-02-28-faster-rcnn/</guid>
      <description>papper link
github link
github link python version
Region Proposal Networks (RPNs) share convolutional layers with state-of-the-art object detection networks.
main contribution.
using region Proposal networks to make fast R-CNN faster.
Region Proposal Network is an a full connection neural network
Attention mechanisms</description>
    </item>
    
    <item>
      <title>Faster R-CNN</title>
      <link>https://zongpitt.com/posts/2021-04-21-faster-r-cnn/</link>
      <pubDate>Wed, 21 Apr 2021 20:00:00 -0400</pubDate>
      
      <guid>https://zongpitt.com/posts/2021-04-21-faster-r-cnn/</guid>
      <description>There is already a post about Faster R-CNN paper. Previous one is R-CNN note just for myself.
In this post I will explain the idea of Faster R-CNN and make it very easy to understand.
paper link
The most idea alrady post on Fast R-CNN. The different is Faster R-CNN using RPN instead of selective search. The main idea of RPN is using sliding window and fast R-CNN sibling output layer to do region proposal.</description>
    </item>
    
    <item>
      <title>Fast R-CNN</title>
      <link>https://zongpitt.com/posts/2021-04-21-fast-r-cnn/</link>
      <pubDate>Wed, 21 Apr 2021 16:00:00 -0400</pubDate>
      
      <guid>https://zongpitt.com/posts/2021-04-21-fast-r-cnn/</guid>
      <description>There is already a post about Fast R-CNN paper. Previous one is Fast R-CNN note just for myself.
In this post I will explain the idea of Fast R-CNN and make it very easy to understand.
papper link
The idea of previous version of R-CNN is very simple. We can easily understand the idea. It is multiple stage network. It have very clear work flow for R-CNN. Proposed regions –&amp;gt; feed to CNN –&amp;gt; classify.</description>
    </item>
    
    <item>
      <title>R-CNN</title>
      <link>https://zongpitt.com/posts/2021-04-21-r-cnn/</link>
      <pubDate>Wed, 21 Apr 2021 16:00:00 -0400</pubDate>
      
      <guid>https://zongpitt.com/posts/2021-04-21-r-cnn/</guid>
      <description>There is already a post about R-CNN paper. Previous one is R-CNN note just for myself.
In this post I will explain the idea of R-CNN and make it very easy to understand.
paper link
Object detection system overview. Our system (1) takes an input image, (2) extracts around 2000 bottom-up region proposals, (3) computes features for each proposal using a large convolutional neural network (CNN), and then (4) classifies each region using class-specific linear SVMs.</description>
    </item>
    
    <item>
      <title>Fast R-CNN paper notes</title>
      <link>https://zongpitt.com/posts/2021-02-28-fast-rcnn/</link>
      <pubDate>Sun, 28 Feb 2021 15:03:00 -0500</pubDate>
      
      <guid>https://zongpitt.com/posts/2021-02-28-fast-rcnn/</guid>
      <description>papper link
github link
summary Basic idea is get CNN feature one time instead 2000 times.
In R-CNN it will propose 2000 region, then do classification using CNN.
It will run about 2000 times CNN. This is very slow proceesion. So in fast R-CNN it only run one time CNN and map the region to feature at the same time. Finally put these region into classification network.
There is a lot detail different between R-CNN and fast R-CNN.</description>
    </item>
    
    <item>
      <title>R-CNN paper notes</title>
      <link>https://zongpitt.com/posts/2021-02-18-r-cnn-paper-notes/</link>
      <pubDate>Thu, 18 Feb 2021 19:49:00 -0500</pubDate>
      
      <guid>https://zongpitt.com/posts/2021-02-18-r-cnn-paper-notes/</guid>
      <description>paper link
Object detection system overview Our system (1) takes an input image, (2) extracts around 2000 bottom-up region proposals, (3) computes features for each proposal using a large convolutional neural network (CNN), and then (4) classifies each region using class-specific linear SVMs.
General Idea and Reason (what and why) extent CNN to object detection &amp;gt; To what extent do the CNN classification results on ImageNet generalize to object detection results on the PASCAL VOC Challenge?</description>
    </item>
    
  </channel>
</rss>
